// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace RoofBySketch
{
    public class RoofBySketchInputs: S3Args
    {
		/// <summary>
		/// Perimeter of Roof.
		/// </summary>
		[JsonProperty("Perimeter")]
		public Elements.Geometry.Polygon Perimeter {get;}

		/// <summary>
		/// Roof elevation relative to the zero plane.
		/// </summary>
		[JsonProperty("Roof Elevation")]
		public double RoofElevation {get;}

		/// <summary>
		/// Thickness of the Roof.
		/// </summary>
		[JsonProperty("Roof Thickness")]
		public double RoofThickness {get;}



        /// <summary>
        /// Construct a RoofBySketchInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public RoofBySketchInputs() : base()
        {
			this.Perimeter = Elements.Geometry.Polygon.Rectangle(1, 1);
			this.RoofElevation = 1000;
			this.RoofThickness = 1;

        }


        /// <summary>
        /// Construct a RoofBySketchInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public RoofBySketchInputs(Elements.Geometry.Polygon perimeter, double roofElevation, double roofThickness, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.Perimeter = perimeter;
			this.RoofElevation = roofElevation;
			this.RoofThickness = roofThickness;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}