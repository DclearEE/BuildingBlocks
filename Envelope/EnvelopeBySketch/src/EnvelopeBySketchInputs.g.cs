// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace EnvelopeBySketch
{
    public class EnvelopeBySketchInputs: S3Args
    {
		/// <summary>
		/// Perimeter of the building envelope.
		/// </summary>
		[JsonProperty("Perimeter")]
		public Elements.Geometry.Polygon Perimeter {get;}

		/// <summary>
		/// Overall height of the building from grade.
		/// </summary>
		[JsonProperty("Building Height")]
		public double BuildingHeight {get;}

		/// <summary>
		/// Depth of the building envelope below grade.
		/// </summary>
		[JsonProperty("Foundation Depth")]
		public double FoundationDepth {get;}

		/// <summary>
		/// Vertical distance between setbacks.
		/// </summary>
		[JsonProperty("Setback Interval")]
		public double SetbackInterval {get;}

		/// <summary>
		/// Depth of each setback from the previous plinth.
		/// </summary>
		[JsonProperty("Setback Depth")]
		public double SetbackDepth {get;}


        
        /// <summary>
        /// Construct a EnvelopeBySketchInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public EnvelopeBySketchInputs() : base()
        {
			this.Perimeter = Elements.Geometry.Polygon.Rectangle(1, 1);
			this.BuildingHeight = 200;
			this.FoundationDepth = 20;
			this.SetbackInterval = 50;
			this.SetbackDepth = 10;

        }


        /// <summary>
        /// Construct a EnvelopeBySketchInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public EnvelopeBySketchInputs(Elements.Geometry.Polygon perimeter, double buildingheight, double foundationdepth, double setbackinterval, double setbackdepth, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.Perimeter = perimeter;
			this.BuildingHeight = buildingheight;
			this.FoundationDepth = foundationdepth;
			this.SetbackInterval = setbackinterval;
			this.SetbackDepth = setbackdepth;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}