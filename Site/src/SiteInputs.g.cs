// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Site
{
	public class SiteInputs: S3Args
	{
		/// <summary>
		/// Selected site including boundary and topography.
		/// </summary>
		[JsonProperty("Lot")]
		public Feature[] Lot {get;}

		/// <summary>
		/// Position of the building footprint relative to the site boundary.
		/// </summary>
		[JsonProperty("Site Setback")]
		public double SiteSetback {get;}

		/// <summary>
		/// Dimension of the bounding box for a building footprint.
		/// </summary>
		[JsonProperty("Building Length")]
		public double BuildingLength {get;}

		/// <summary>
		/// Dimension of the bounding box for a building footprint.
		/// </summary>
		[JsonProperty("Building Width")]
		public double BuildingWidth {get;}

		/// <summary>
		/// Interval for trial placements of building footprints within the site boundary.
		/// </summary>
		[JsonProperty("Search Grid Resolution")]
		public double SearchGridResolution {get;}

		/// <summary>
		/// Tandom seed determining the order of placement point search in the grid.
		/// </summary>
		[JsonProperty("Search Seed")]
		public double SearchSeed {get;}


		
		/// <summary>
		/// Construct a SiteInputs with default inputs.
		/// This should be used only for testing.
		/// </summary>
		public SiteInputs() : base()
		{
			this.SiteSetback = 10;
			this.BuildingLength = 100;
			this.BuildingWidth = 100;
			this.SearchGridResolution = 10;
			this.SearchSeed = 100;

		}
		
		/// <summary>
		/// Construct a SiteInputs specifying all inputs.
		/// </summary>
		/// <returns></returns>
		[JsonConstructor]
		public SiteInputs(Feature[] lot, double sitesetback, double buildinglength, double buildingwidth, double searchgridresolution, double searchseed, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
		{
			this.Lot = lot;
			this.SiteSetback = sitesetback;
			this.BuildingLength = buildinglength;
			this.BuildingWidth = buildingwidth;
			this.SearchGridResolution = searchgridresolution;
			this.SearchSeed = searchseed;

		}
	}
}