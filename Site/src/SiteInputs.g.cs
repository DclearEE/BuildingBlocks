// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace Site
{
    public class SiteInputs: S3Args
    {
		/// <summary>
		/// The location of the object on the planet Earth.
		/// </summary>
		[JsonProperty("location")]
		public Feature[] Location {get;}

		/// <summary>
		/// Position of the building footprint relative to the site boundary.
		/// </summary>
		[JsonProperty("Site Setback")]
		public double SiteSetback {get;}

		/// <summary>
		/// Dimension of the bounding box for a building footprint.
		/// </summary>
		[JsonProperty("Building Length")]
		public double BuildingLength {get;}

		/// <summary>
		/// Dimension of the bounding box for a building footprint.
		/// </summary>
		[JsonProperty("Building Width")]
		public double BuildingWidth {get;}

		/// <summary>
		/// Interval for trial placements of building footprints within the site boundary.
		/// </summary>
		[JsonProperty("Search Grid Resolution")]
		public double SearchGridResolution {get;}

		/// <summary>
		/// Tandom seed determining the order of placement point search in the grid.
		/// </summary>
		[JsonProperty("Search Seed")]
		public double SearchSeed {get;}


        
        /// <summary>
        /// Construct a SiteInputs with default inputs.
        /// This should be used only for testing.
        /// </summary>
        public SiteInputs() : base()
        {
			this.Location = new Elements.GeoJSON.Feature[]{ 
                new Elements.GeoJSON.Feature(
                    new Elements.GeoJSON.Polygon(
                        new Elements.GeoJSON.Position[][]{
                            new Elements.GeoJSON.Position[]{
                                new Elements.GeoJSON.Position(-96.78204,32.78411),
                                new Elements.GeoJSON.Position(-96.78191,32.78359),
                                new Elements.GeoJSON.Position(-96.78050,32.78383),
                                new Elements.GeoJSON.Position(-96.78063,32.784),
                                new Elements.GeoJSON.Position(-96.78204,32.78411)
                            }
                        }), null)
            };;
			this.SiteSetback = 10;
			this.BuildingLength = 100;
			this.BuildingWidth = 100;
			this.SearchGridResolution = 50;
			this.SearchSeed = 100;

        }
        
        /// <summary>
        /// Construct a SiteInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public SiteInputs(Feature[] location, double sitesetback, double buildinglength, double buildingwidth, double searchgridresolution, double searchseed, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.Location = location;
			this.SiteSetback = sitesetback;
			this.BuildingLength = buildinglength;
			this.BuildingWidth = buildingwidth;
			this.SearchGridResolution = searchgridresolution;
			this.SearchSeed = searchseed;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}